// SCAN Disk Scheduling algorithm (https://www.geeksforgeeks.org/scan-elevator-disk-scheduling-algorithms/)
// C-SCAN Disk Scheduling Algorithm (https://www.geeksforgeeks.org/c-scan-disk-scheduling-algorithm/)
#include <stdio.h>
#include <stdlib.h>

#define DOWN 0
#define UP 1
#define NUM_FLOORS 9

int trackBuffer[NUM_FLOORS];


void CSCAN(int arr[], int head)
{
	int seek_count = 0;
	int distance, cur_track;
	int* left = malloc(sizeof(int) * NUM_FLOORS);
    int* right = malloc(sizeof(int) * NUM_FLOORS);
    int left_count = 0;
    int right_count = 0;

    for (int i = 0; i < NUM_FLOORS; i++) {
        left[i] = (NUM_FLOORS+1);
        right[i] = (NUM_FLOORS+1);
    }

    left[left_count++] = -2;
    right[right_count++] = NUM_FLOORS + 1;

	for (int i = 0; i < NUM_FLOORS-1; i++) {
		if (arr[i] < head)
			left[left_count++] = arr[i];
		if (arr[i] > head)
			right[right_count++] = arr[i];
	}

	// Sorting left and right arrays
    for (int i = 0; i < left_count - 1; i++) {
        for (int j = 0; j < left_count - i - 1; j++) {
            if (left[j] > left[j + 1]) {
                int temp = left[j];
                left[j] = left[j + 1];
                left[j + 1] = temp;
            }
        }
    }
    for (int i = 0; i < right_count - 1; i++) {
        for (int j = 0; j < right_count - i - 1; j++) {
            if (right[j] > right[j + 1]) {
                int temp = right[j];
                right[j] = right[j + 1];
                right[j + 1] = temp;
            }
        }
    }



	// first service the requests
    // on the right side of the
    // head.
    for (int i = 0; i < NUM_FLOORS; i++) {
        cur_track = right[i];
        // appending current track to seek sequence
        //trackBuffer[i] = cur_track;
        if(cur_track < NUM_FLOORS && cur_track >= 0)
            printf("%d\n", cur_track);
        // calculate absolute distance
        distance = abs(cur_track - head);
  
        // increase the total count
        seek_count += distance;
  
        // accessed track is now new head
        head = cur_track;
    }

    // once reached the right end
    // jump to the beginning.
    head = 0;
  
    // adding seek count for head returning from 199 to 0
    seek_count += (NUM_FLOORS - 1);

    // Now service the requests again
    // which are left.
    for (int i = 0; i < NUM_FLOORS; i++) {
        cur_track = left[i];
  
        // appending current track to seek sequence
        //trackBuffer[i] = cur_track;
        if(cur_track < NUM_FLOORS && cur_track >= 0)
            printf("%d\n", cur_track);
  
        // calculate absolute distance
        distance = abs(cur_track - head);
  
        // increase the total count
        seek_count += distance;
  
        // accessed track is now the new head
        head = cur_track;
    }
    printf("Total number of seek operations = %d\n", seek_count);
}


// Driver code
int main()
{
    for (int i = 0; i < NUM_FLOORS; i++) {
        trackBuffer[i] = -1;
    }
	// request array
	int arr[NUM_FLOORS] = { 8,5,4,1,(NUM_FLOORS+1),(NUM_FLOORS+1),(NUM_FLOORS+1),(NUM_FLOORS+1) };
	int head = 7;

	CSCAN(arr, head);

	return 0;
}
